<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".hlsl" #>// This source file is generated by a T4 template
Texture2D<float> lumaTexture;
Texture2D<float2> chromaTexture;

float4 main( float4 pos: SV_Position ) : SV_Target
{
	int2 locLuma = ( int2 )pos.xy;
	int2 locChroma = locLuma >> 1;

	float luma = lumaTexture.Load( locLuma );
	float2 chroma = chromaTexture.Load( locChroma );
<# 
	var m = new Matrix();
	// Luma scaling coefficient is the same for all 3 RGB channel, saving couple multiply instructions.
#>
	// float scaledLuma = luma * <#= m.red.y #>;
	float scaledLuma = luma;
	float4 result;
	result.r = <#= m.red.hlsl() #>;
	result.g = <#= m.green.hlsl() #>;
	result.b = <#= m.blue.hlsl() #>;
	result.a = 1.0;
	return result;
}<#+

struct Vector4
{
	public double y, cb, cr, offset;

	// const double cbcrMidPoint = 128.0 / 255.0;
	const double cbcrMidPoint = 0.5;

	public void setMatrix( double cb, double cr )
	{
		// Set the matrix
		y = 1;
		this.cb = cb;
		this.cr = cr;
		offset = -( cbcrMidPoint * cb + cbcrMidPoint * cr );

		// Hoping eQuantization.FullRange works as documented.
		return;

		// BT.709 uses weird ranges for RGB, [ 16 .. 235 ], we want [ 0 .. 255 ] instead, need scale + offset
		// This T4 template runs at compile time and uses 64-bit floats, precision should be OK.
		double mul = 255.0 / ( 235 - 16 );
		y *= mul;
		cb *= mul;
		cr *= mul;
		offset -= 16 / 255.0;
	}

	public string hlsl()
	{
		StringBuilder sb = new StringBuilder();
		sb.Append( "scaledLuma" );
		accumulate( sb, "chroma.x", cb );
		accumulate( sb, "chroma.y", cr );
		if( offset > 0 )
			sb.AppendFormat( " + {0}", offset );
		else if( offset < 0 )
			sb.AppendFormat( " - {0}", -offset );
		return sb.ToString();
	}

	static void accumulate( StringBuilder sb, string arg, double mul )
	{
		if( mul > 0 )
			sb.AppendFormat( " + {0} * {1}", arg, mul );
		else if( mul < 0 )
			sb.AppendFormat( " - {0} * {1}", arg, -mul );
	}
}

class Matrix
{
	public Vector4 red, green, blue;
	public Matrix()
	{
		red.setMatrix( 0, 1.28033 );
		green.setMatrix( -0.21482, -0.38059 );
		blue.setMatrix( 2.12798, 0 );
	}
}
#>