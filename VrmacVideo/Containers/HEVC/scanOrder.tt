<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>// This C# source file has been generated by a T4 template.
namespace VrmacVideo.Containers.HEVC
{
	static class ScanOrder
	{
		// Specified in 6.5.3 "Up-right diagonal scan order array initialization process", page 30 of the spec.
		// We run that function offline in compile time for 4x4 and 8x8 blocks (the code is C# in a T4 template), cache values in byte arrays.

<#
	var arr = compute( 4 );
#>		/// <summary>4x4 diagonal scan, X coordinates</summary>
		public static readonly byte[] diagonalScan_4x4_x = new byte[ 16 ]
		{
			<#= printAll( arr, 0 ) #>
		};

		/// <summary>4x4 diagonal scan, Y coordinates</summary>
		public static readonly byte[] diagonalScan_4x4_y = new byte[ 16 ]
		{
			<#= printAll( arr, 1 ) #>
		};
<#
	arr = compute( 8 );
#>		
		/// <summary>8x8 diagonal scan, X coordinates</summary>
		public static readonly byte[] diagonalScan_8x8_x = new byte[ 64 ]
		{
			<#= printAll( arr, 0 ) #>
		};

		/// <summary>8x8 diagonal scan, Y coordinates</summary>
		public static readonly byte[] diagonalScan_8x8_y = new byte[ 64 ]
		{
			<#= printAll( arr, 1 ) #>
		};
	}
}<#+

static byte[,,] compute( int blkSize )
{
	byte[,,] diagScan = new byte[ blkSize, blkSize, 2 ];
	int i = 0, x = 0, y = 0;
	while( true )
	{
		while( y >= 0 )
		{
			if( x < blkSize && y < blkSize )
			{
				diagScan[ i / blkSize, i % blkSize, 0 ] = checked( (byte)x );
				diagScan[ i / blkSize, i % blkSize, 1 ] = checked( (byte)y );
				i++;
			}
			y--;
			x++;
		}
		y = x;
		x = 0;
		if( i >= blkSize * blkSize )
			return diagScan;
	}
}

static IEnumerable<byte> row( byte[,,] arr, int y, int z )
{
	int inner = arr.GetLength( 1 );
	for( int i = 0; i < inner; i++ )
		yield return arr[ y, i, z ];
}

static IEnumerable<string> print( byte[,,] arr, int coord )
{
	int outer = arr.GetLength( 0 );
	for( int i = 0; i<outer; i++ )
	{
		var vals = row( arr, i, coord );
		yield return string.Join( ", ", vals );
	}
}

static string printAll( byte[,,] arr, int coord )
{
	return string.Join( ",\r\n\t\t\t", print( arr, coord ) );
}
#>