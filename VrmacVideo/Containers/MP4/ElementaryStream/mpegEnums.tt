<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>// This C# source file has been generated by a T4 template.
namespace VrmacVideo.Containers.MP4
{
	/// <summary>ISO/IEC 14496-1 Table 1</summary>
	public enum eDescriptorTag: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "elementaryDescriptors.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>ISO/IEC 14496-1 Table 6</summary>
	public enum eObjectType: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "objectTypeIndication.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>ISO/IEC 14496-1 Table 5</summary>
	public enum eStreamType: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "streamTypes.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>ISO/IEC 14496-10 Table 7-1</summary>
	public enum eNaluType: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "naluTypes.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>Recommendation ITU-T H.264 Table 7-6 "Name association to slice_type"</summary>
	public enum eSliceType: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "sliceTypes.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>ISO/IEC 14496-10 table E-3 "Colour primaries"</summary>
	public enum eColorPrimaries: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "colorPrimaries.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>ISO/IEC 14496-10 table E-4 "Transfer characteristics"</summary>
	public enum eTransferFunc: byte
	{
<#
	foreach( var v in readSource( this.Host.ResolvePath( "xfer.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}
}<#+
static readonly char[] space = new char[ 1 ] { ' ' };

struct EnumValue
{
	public readonly string code, comment;

	public EnumValue( string line )
	{
		string[] fields = line.Split( space, 3 );
		code = $"{ fields[ 1 ] } = { fields[ 0 ] }";
		comment = fields[ 2 ];
	}
}

static IEnumerable<EnumValue> readSource( string sourcePath )
{
	using( var file = File.OpenText( sourcePath ) )
	{
		while( true )
		{
			string line = file.ReadLine();
			if( null == line )
				yield break;
			if( string.IsNullOrWhiteSpace( line ) )
				continue;
			yield return new EnumValue( line );
		}
	}
}
#>