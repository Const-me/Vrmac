<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>// This C# source file has been generated by a T4 template.

namespace VrmacVideo.Containers.MP4
{
	/// <summary>The values are from the spec. Specifically, they are from ISO/IEC 14496-12 spec.</summary>
	public enum eBoxType: uint
	{
		/// <summary>Empty state of the reader; also returned from <see cref="Mp4Reader.readBox" /> when end of file reached.</summary>
		Empty = uint.MaxValue,
		/// <summary>Fake box type returned from <see cref="Mp4Reader.readBox" /> when end of container reached, after it pops the container from the stack.</summary>
		ChildContainerEnd = uint.MaxValue - 1,
		/// <summary>User extension, the actual box type is a GUID as opposed to 4 bytes. Vrmac Video silently skips such boxes.</summary>
		uuid = 0x64697575,

<#
	foreach( var v in parseNumbers( this.Host.ResolvePath( "boxTypes.txt" ), 3 ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>
	}

	/// <summary>MP4 / QuickTime 'ftyp' designations</summary>
	public enum eFileType: uint
	{
<#
	foreach( var v in parseNumbers( this.Host.ResolvePath( "fileTypes.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>	}

	/// <summary>Media handlers constants</summary>
	public enum eMediaHandler: uint
	{
<#
	foreach( var v in parseNumbers( this.Host.ResolvePath( "mediaHandlers.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>	}

	/// <summary>AVC1 boxes, documented in these proprietary ISO/IEC standards</summary>
	/// <remarks>The standards aren’t free, the committee sells them. Fortunately, some awesome people from both industry and academia uploaded them to the Internets for public access.</remarks>
	public enum eAVC1BoxType: uint
	{
<#
	foreach( var v in parseNumbers( this.Host.ResolvePath( "avc1Magic.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>	}

	public enum eAudioBoxType: uint
	{
<#
	foreach( var v in parseNumbers( this.Host.ResolvePath( "audioMagic.txt" ) ) )
	{
#>		/// <summary><#= v.comment #></summary>
		<#= v.code #>,
<#
	}
#>	}
}<#+
static readonly char[] space = new char[ 1 ] { ' ' };

struct EnumValue
{
	public readonly string code, comment;

	public EnumValue( string name, string comment )
	{
		uint ui = nameToBinary( name );
		name = name.Replace( "-", "" );
		code = $"{ name } = 0x{ ui.ToString( "x" ) }";
		this.comment = makeSentenseCase( comment );
	}
}

static IEnumerable<EnumValue> parseNumbers( string sourcePath, int columns = 2 )
{
	HashSet<string> written = new HashSet<string>();
	foreach( string line in readLines( sourcePath ) )
	{
		string[] fields = line.Split( space, columns );
		string name = fields[ 0 ];
		if( !written.Add( name ) )
			continue;

		string comment = fields[ columns - 1 ];
		if( columns == 3 )
			comment = $"{ comment }, { fields[ 1 ] }";
		yield return new EnumValue( name, comment );
	}
}

static IEnumerable<string> readLines( string sourcePath )
{
	using( var file = File.OpenText( sourcePath ) )
	{
		while( true )
		{
			string line = file.ReadLine();
			if( null == line )
				yield break;
			if( string.IsNullOrWhiteSpace( line ) )
				continue;
			yield return line.Trim();
		}
	}
}

static uint nameToBinary( string name )
{
	byte[] bytes = Encoding.ASCII.GetBytes( name );
	if( 3 == bytes.Length )
		Array.Resize( ref bytes, 4 );
	if( 4 != bytes.Length )
		throw new ApplicationException();
	return BitConverter.ToUInt32( bytes, 0 );
}

static string makeSentenseCase( string comment )
{
	if( char.IsDigit( comment[ 0 ] ) || comment.StartsWith( "AVC" )|| comment.StartsWith( "MPEG4" ) )
		return comment;
	string[] fields = comment.Split( space, 2 );
	fields[ 0 ] = CultureInfo.CurrentCulture.TextInfo.ToTitleCase( fields[ 0 ] );
	return string.Join( " ", fields );
}

#>